db.orderdetails.updateMany(
  { OrderID: 11078 },
  { $inc: { Discount: 0.05 } }
)


PoweR
power2938
Rozmawia

PoweR
 rozpoczął(-ęła) rozmowę, która trwała 2 godziny. — 17.03.2025 18:10
PoweR — 17.03.2025 18:37
Obraz
PoweR — 17.03.2025 18:48
Obraz
PoweR — 17.03.2025 19:23
Obraz
Obraz
PoweR — 17.03.2025 20:13
-
-
-
-
-
Obraz
Obraz
Obraz
PoweR
 rozpoczął(-ęła) rozmowę, która trwała 20 minut. — 18.03.2025 12:16
Kacper1710
 rozpoczął(-ęła) rozmowę, która trwała godzina. — 22.03.2025 17:22
PoweR — 22.03.2025 17:34
https://prod.liveshare.vsengsaas.visualstudio.com/join?1E3A4B058C8FFF03510125A0D79B9B14F284
Visual Studio Code for the Web
Build with Visual Studio Code, anywhere, anytime, entirely in your browser.
https://prod.liveshare.vsengsaas.visualstudio.com/join?AFA8F781C040BFA0F788CA70E598CAF4757F
Visual Studio Code for the Web
Build with Visual Studio Code, anywhere, anytime, entirely in your browser.
Kacper1710 — 22.03.2025 18:00
CREATE OR REPLACE FUNCTION f_available_trips_to(p_country VARCHAR2, p_date_from DATE, p_date_to DATE) RETURN SYS_REFCURSOR AS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
    SELECT trip_id, country, trip_date, trip_name, max_no_places, no_available_places
    FROM vw_available_trip
    WHERE country = p_country AND trip_date BETWEEN p_date_from AND p_date_to;
    RETURN v_cursor;
END f_available_trips_to;
PoweR — 22.03.2025 18:03
Obraz
Obraz
Kacper1710 — 22.03.2025 18:11
CREATE OR REPLACE FUNCTION f_available_trips_to(p_country VARCHAR2, p_date_from DATE, p_date_to DATE) RETURN SYS_REFCURSOR AS
    v_cursor SYS_REFCURSOR;
BEGIN
    OPEN v_cursor FOR
    SELECT trip_id, country, trip_date, trip_name, max_no_places, NUMBER_LEFT
    FROM vw_available_trip
    WHERE country = p_country AND trip_date BETWEEN p_date_from AND p_date_to;
    RETURN v_cursor;
END f_available_trips_to;
PoweR
 rozpoczął(-ęła) rozmowę, która trwała 3 minuty. — 26.03.2025 20:06
Kacper1710
 rozpoczął(-ęła) rozmowę, która trwała 30 minut. — 26.03.2025 20:09
PoweR — 26.03.2025 20:34
Obraz
PoweR — 27.03.2025 22:29
w vw_trip nie bierzesz pod uwagę 'N' i może wyjątki rzucaj po ang 
PoweR — 28.03.2025 00:01
dobra zrobiłem i pushnąłem
ogółem w zad 6 będzie w huj roboty znowu bo trzeba wszystkie widoki, triggery i procedury od nowa napisać + aktualizacja liczby miejsc poprzez bezpośrednie pole w TRIP xd...
Kacper1710 — 28.03.2025 13:43
sory mnie w domu nie bylo wtedy
postarm sie z tym 4 i 5 pocisnac jutro albo moze w miare wczensie wroce dzisiaj to cos jeszcze cos zrobie
PoweR — 30.03.2025 20:37
to trzeba poprawić jeszcze
Kacper1710 — 30.03.2025 22:22
dobra juz jestem
PoweR — 30.03.2025 22:23
no ja się męczę z ostatnią procedurą i triggerem bo kompletnie nie wiem co tam ma być i skończyłem
napiszę parę zdań podsumowujących i zrobię kolejnego pusha i tyle
Kacper1710 — 30.03.2025 22:24
a wbijasz chwile dc?
Kacper1710
 rozpoczął(-ęła) rozmowę, która trwała godzina. — 30.03.2025 22:25
Kacper1710 — 30.03.2025 23:45
odrzucilo mi pusha
a juz widze
PoweR — 30.03.2025 23:47
zrób commit i pullnij
auto merge raczej zrobi
bo tylko plik dodałem choć idk przez co innego
Kacper1710 — 30.03.2025 23:47
tak bo ja nie pullnalem po tym ja kodales ta kosnole
dobra pushniete
PoweR — 30.03.2025 23:51
kk to mogę już to ogarnąć albo jak chcesz to zrób z tego pdf i pobierz te dwa pliki .sql i na upela i to wszystko
Kacper1710 — 30.03.2025 23:52
moze przejrzyj jeszcze czy jest git wklejone 
jak git to skonwertuj
PoweR — 30.03.2025 23:56
sprawdziłem chyba git
dobra to zaraz ogarnę nastawiłem budzik xd
Kacper1710 — 30.03.2025 23:58
spoko
PoweR — 31.03.2025 00:25
Typ załącznika: archive
cw01.zip
543.11 KB
takie coś wysłałem
Kacper1710 — 28.04.2025 17:11
jestem
PoweR
 rozpoczął(-ęła) rozmowę, która trwała 2 godziny. — 28.04.2025 17:11
PoweR — 28.04.2025 18:48
db.orders.aggregate([
    {
      $lookup: {
        from: "customers",
        localField: "CustomerID",
        foreignField: "CustomerID",
Rozwiń
cos.json
4 KB
PoweR — 28.04.2025 19:00
dobra ogarnąłem ty tam rzeczywiście masz mieć group by
ale i tak miałeś chyba za krótkie te polecenie
bo masz mieć strukturę jak ja
a ja mam 122 linijki
więc musisz zmodyfikować tamto co miałeś i dodać to moje ale bez sekcji Customer:
Kacper1710 — 28.04.2025 19:04
dobra
Kacper1710
 rozpoczął(-ęła) rozmowę, która trwała 41 minut. — 29.04.2025 16:07
Kacper1710 — 29.04.2025 16:09
db.customers.aggregate([
    {
      $lookup: {
        from: "orders",
        localField: "CustomerID",
        foreignField: "CustomerID",
Rozwiń
1b.js
3 KB
Kacper1710 — 29.04.2025 16:36
db.customers.aggregate([
    {
      $lookup: {
        from: "orders",
        localField: "CustomerID",
        foreignField: "CustomerID",
Rozwiń
1bv2.js
4 KB
PoweR — 29.04.2025 17:08
na githubie są najnowsze wersje
zawsze commituję to tak na przyszłość gdyby coś trzeba było
Kacper1710 — 29.04.2025 17:17
a na ktorym?
PoweR — 29.04.2025 17:18
na gałąź wejdź
nazwa repo BazyDanychOracle
muszę zmienić nazwę wsm
Kacper1710 — 29.04.2025 17:19
a dobra tutaj, juz widze brancha
PoweR — 30.04.2025 10:57
ogólnie to jednak mam błąd w tym moim
muszę poprawić, miałem wątpliwości do jednej rzeczy i się okazało że słusznie xd
bo jeden produkt trafia wiele razy z różnymi productID...
Kacper1710 — 30.04.2025 12:29
spoczko i tak jeszcze nie robilem
PoweR — 30.04.2025 12:29
Godzinę to naprawiałem xd
Masakra
Kacper1710 — 30.04.2025 12:29
o kurde xd
PoweR — 30.04.2025 12:34
A miałem zamiar już zrobić do końca zad 1 tzn nwm d i e np
Bo chyba e najpierw trzeba jak patrzylem
Kacper1710 — 30.04.2025 12:36
nie pamietam
PoweR
 rozpoczął(-ęła) rozmowę, która trwała 3 godziny. — Wczoraj o 19:20
PoweR — Wczoraj o 21:44
Obraz
PoweR
 rozpoczął(-ęła) rozmowę. — 17:34
Kacper1710 — 18:06
db.orderdetails.updateMany(
  { OrderID: 11078 },
  { $inc: { Discount: 0.05 } }
)
db.orders.aggregate([
  { $match: { OrderID: 11078 } },
  {
    $lookup: {
      from: "orderdetails",
      localField: "OrderID",
      foreignField: "OrderID",
      as: "Orderdetails"
    }
  },
  {
    $unwind: "$Orderdetails"
  },
  {
    $lookup: {
      from: "products",
      localField: "Orderdetails.ProductID",
      foreignField: "ProductID",
      as: "Product"
    }
  },
  { $unwind: "$Product" },
  {
    $lookup: {
      from: "categories",
      localField: "Product.CategoryID",
      foreignField: "CategoryID",
      as: "Category"
    }
  },
  { $unwind: "$Category" },
  {
    $set: {
      "Orderdetails.product": {
        $mergeObjects: ["$Product", { CategoryName: "$Category.CategoryName" }]
      },
      "Orderdetails.Value": {
        $multiply: [
          "$Orderdetails.UnitPrice",
          "$Orderdetails.Quantity",
          { $subtract: [1, "$Orderdetails.Discount"] }
        ]
      }
    }
  },
  {
    $group: {
      _id: "$OrderID",
      Customer: { $first: "$Customer" },
      Employee: { $first: "$Employee" },
      Dates: {
        $first: {
          OrderDate: "$OrderDate",
          RequiredDate: "$RequiredDate"
        }
      },
      Freight: { $first: "$Freight" },
      Shipment: { $first: "$Shipment" },
      Orderdetails: { $push: "$Orderdetails" },
      OrderTotal: { $sum: "$Orderdetails.Value" }
    }
  },
  {
    $merge: {
      into: "OrderInfo",
      whenMatched: "replace",
      whenNotMatched: "insert"
    }
  }
])
db.OrderInfo.aggregate([
  {
    $group: {
      _id: "$Customer.CustomerID",
      CustomerID: { $first: "$Customer.CustomerID" },
      CompanyName: { $first: "$Customer.CompanyName" },
      City: { $first: "$Customer.City" },
      Country: { $first: "$Customer.Country" },
      Orders: { $push: "$$ROOT" }
    }
  },
  {
    $unset: ["Orders.Customer"]
  },
  {
    $merge: {
      into: "CustomerInfo",
      whenMatched: "replace",
      whenNotMatched: "insert"
    }
  }
])
PoweR — 19:06
Obraz
317
db.orders.aggregate([
    { $match: { OrderID: 11078 } },
    { $lookup: {
        from: "customers",
        localField: "CustomerID",
        foreignField: "CustomerID",
Rozwiń
message.txt
4 KB
PoweR — 19:24
db.orders.aggregate([
  { $match: { OrderID: 11078 } },
  { $lookup: {
        from: "customers",
        localField: "CustomerID",
        foreignField: "CustomerID",
Rozwiń
message.txt
3 KB
Obraz
Obraz
Obraz
db.orders.aggregate([
  { $match: { OrderID: 11078 } },
  { $lookup: {
        from: "customers",
        localField: "CustomerID",
        foreignField: "CustomerID",
Rozwiń
message.txt
3 KB
PoweR — 19:41
--------------
f
2
PoweR — 19:42
db.orders.aggregate([
  { $match: { OrderID: 11078 } },
  { $lookup: {
        from: "customers",
        localField: "CustomerID",
        foreignField: "CustomerID",
Rozwiń
message.txt
3 KB
Obraz
Obraz
3f
db.OrderInfo.aggregate([
  {
    $group: {
      _id: "$Customer.CustomerID",
      CustomerID: { $first: "$Customer.CustomerID" },
      CompanyName: { $first: "$Customer.CompanyName" },
      City: { $first: "$Customer.City" },
      Country: { $first: "$Customer.Country" },
      Orders: { $push: "$$ROOT" }
    }
  },
  {
    $unset: ["Orders.Customer"]
  },
  {
    $merge: {
      into: "CustomerInfo",
      on: "CustomerID",
      whenMatched: "replace",
      whenNotMatched: "insert"
    }
  }
])
PoweR — 19:49
-
-
-
-
-
-
-
-
-
-
-
-
-
2
Obraz
Obraz
Obraz
﻿
db.orders.aggregate([
  { $match: { OrderID: 11078 } },
  { $lookup: {
        from: "customers",
        localField: "CustomerID",
        foreignField: "CustomerID",
        as: "Customer"
    }},
    { $unwind: "$Customer" },
  { $lookup: {
        from: "employees",
        localField: "EmployeeID",
        foreignField: "EmployeeID",
        as: "Employee"
    }},
    { $unwind: "$Employee" },
  {
    $lookup: {
      from: "orderdetails",
      localField: "OrderID",
      foreignField: "OrderID",
      as: "Orderdetails"
    }
  },
  {
    $unwind: "$Orderdetails"
  },
  { $lookup: {
        from: "shippers",
        localField: "ShipVia",
        foreignField: "ShipperID",
        as: "Shipper"
    }},
    { $unwind: { path: "$Shipper", preserveNullAndEmptyArrays: true } },
  {
    $lookup: {
      from: "products",
      localField: "Orderdetails.ProductID",
      foreignField: "ProductID",
      as: "Product"
    }
  },
  { $unwind: "$Product" },
  {
    $lookup: {
      from: "categories",
      localField: "Product.CategoryID",
      foreignField: "CategoryID",
      as: "Category"
    }
  },
  { $unwind: "$Category" },
  {
    $set: {
      "Orderdetails.product": {
        ProductID: "$Product.ProductID",
          ProductName: "$Product.ProductName",
          QuantityPerUnit: "$Product.QuantityPerUnit",
          CategoryID: "$Product.CategoryID",
          CategoryName: "$ProdCat.CategoryName"
      },
      "Orderdetails.Value": {
        $multiply: [
          "$Orderdetails.UnitPrice",
          "$Orderdetails.Quantity",
          { $subtract: [1, "$Orderdetails.Discount"] }
        ]
      }
    }
  },
  {
    $group: {
      _id: "$OrderID",
      OrderID: {$first: "$OrderID"},
      Customer: { $first: {
          CustomerID: "$Customer.CustomerID",
          CompanyName: "$Customer.CompanyName",
          City: "$Customer.City",
          Country: "$Customer.Country"
        }},
        Employee: { $first: {
          EmployeeID: "$Employee.EmployeeID",
          FirstName: "$Employee.FirstName",
          LastName: "$Employee.LastName",
          Title: "$Employee.Title"
        }},
      Dates: {
        $first: {
          OrderDate: "$OrderDate",
          RequiredDate: "$RequiredDate"
        }
      },
      Freight: { $first: "$Freight" },
      Shipment: { $first: {
          Shipper: {
            ShipperID: "$Shipper.ShipperID",
            CompanyName: "$Shipper.CompanyName"
          },
          ShipName: "$ShipName",
          ShipAddress: "$ShipAddress",
          ShipCity: "$ShipCity",
          ShipCountry: "$ShipCountry"
        }},
      Orderdetails: { $push: "$Orderdetails" },
      OrderTotal: { $sum: "$Orderdetails.Value" }
    }
  },
  {
    $merge: {
      into: "OrderInfo",
      on: "OrderID",
      whenMatched: "replace",
      whenNotMatched: "insert"
    }
  }
])


db.OrderInfo.aggregate([
    {
      $group: {
        _id: "$Customer.CustomerID",
        CustomerID: { $first: "$Customer.CustomerID" },
        CompanyName: { $first: "$Customer.CompanyName" },
        City: { $first: "$Customer.City" },
        Country: { $first: "$Customer.Country" },
        Orders: { $push: "$$ROOT" }
      }
    },
    {
      $unset: ["Orders.Customer"]
    },
    {
      $merge: {
        into: "CustomerInfo",
        on: "CustomerID",
        whenMatched: "replace",
        whenNotMatched: "insert"
      }
    }
  ])